; global variables used
globals 
[  
  game-done? ; boolean indicating whether the enemy location is the same as player location
  open ; the open list of patches
  closed ; the closed list of patches
]

; patch variables used
patches-own 
[ 
  parent-patch ; patch's predecessor
  f ; the value of knowledge plus heuristic cost function f()
  g ; the value of knowledge cost function g()
  h ; the value of heuristic cost function h()
]

; check if the game has finished (turtle has reached destination)
; call the path-finding procedure with two patches as parameters - source and destination patches
; make turtle move by one in the path found
; reset patch colour
; then update the source so that next time this procedure is ran the correct source patch will be passed into the procedure
to find-shortest-path-to-destination
   
  ;;Set Source to enemy location
  ask patch-here
  [    
    set innerLabel "source"
  ]
   
  ;;Find an optimal route to the target.
  set current-path find-a-path one-of patches with [innerLabel = "source"] one-of patches with [innerLabel = "destination"]

  ;;If we can move to a patch in the search path, move.
  if length current-path > 0
  [ 
    move-to item 1 current-path
  ]
  
  ;;Clear the source patches.
  if patch-here != one-of patches with [innerLabel = "destination"]
  [
    ask patches with [innerLabel = "source"]
    [
      set innerLabel ""
    ]
  ]
end

; the actual implementation of the A* path finding algorithm
; it takes the source and destination patches as inputs
; and reports the optimal path if one exists between them as output
to-report find-a-path [ source-patch destination-patch ] 
  
  ; initialize all variables to default values
  let search-done? false
  let search-path []
  let current-patch 0
  set open []
  set closed []  
  
  ; add source patch in the open list
  set open lput source-patch open
  
  ; loop until we reach the destination or the open list becomes empty
  while [ search-done? = false and state = "SEEK STATE"]
  [    
    ifelse length open > 0
    [
      ; sort the patches in open list in increasing order of their f() values
      set open sort-by [[f] of ?1 < [f] of ?2] open
      
      ; take the first patch in the open list
      ; as the current patch (which is currently being explored (n))
      ; and remove it from the open list
      set current-patch item 0 open 
      set open remove-item 0 open
      
      ; add the current patch to the closed list
      set closed lput current-patch closed
      
      ; explore the Von Neumann (left, right, top and bottom) neighbors of the current patch
      ask current-patch
      [         
        ; if any of the neighbors is the destination stop the search process
        ifelse any? neighbors4 with [ (pxcor = [ pxcor ] of destination-patch) and (pycor = [pycor] of destination-patch)]
        [
          set search-done? true
          set closed []
          set open []
        ]
        [
          ; the neighbors should not be obstacles or already explored patches (part of the closed list)          
          ask neighbors4 with [ pcolor = black and (not member? self closed) and (self != parent-patch) ]     
          [
            ; the neighbors to be explored should also not be the source or 
            ; destination patches or already a part of the open list (unexplored patches list)
            if not member? self open and self != source-patch and self != destination-patch
            [
              ; add the eligible patch to the open list
              set open lput self open
              
              ; update the path finding variables of the eligible patch
              set parent-patch current-patch 
              set g [g] of parent-patch  + 1
              set h distance destination-patch
              set f (g + h)
            ]
          ]
        ]    
      ]
    ]    
    [
      ; if a path is not found (search is incomplete) and the open list is exhausted 
      ; display a user message and report an empty search path list.
      ;set search-done? true
      output-show (word "No path exists between the source and destination patches.")
      report []
    ]
  ]
  
  ; if a path is found (search completed) add the current patch 
  ; (node adjacent to the destination) to the search path.
  set search-path lput current-patch search-path
  
  
    ; trace the search path from the current patch 
  ; all the way to the source patch using the parent patch
  ; variable which was set during the search for every patch that was explored
  let targetPatch first search-path
  while [ targetPatch != source-patch ]
  [
    set search-path lput [parent-patch] of targetPatch search-path 
    set targetPatch [parent-patch] of targetPatch
  ]
  
  
  ; add the destination patch to the front of the search path
  set search-path fput destination-patch search-path
  
  ; reverse the search path so that it starts from a patch adjacent to the
  ; source patch and ends at the destination patch
  set search-path reverse search-path  

  ; report the search path
  report search-path  
end


